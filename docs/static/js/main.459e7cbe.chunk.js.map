{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"kPAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,uBAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAqB5C,OACI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,OASd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,YA0B/BZ,EAAYe,WAAa,CACrBd,c,OAAee,EAAUC,KAAKC,Y,2BChClBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,iDAEmCC,UAAUH,GAF7C,+DAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAYXM,GAZW,4CAAH,sDCFVO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,+BAAMA,EAAN,OCACO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFb,SAAEA,GAAa,IAAD,EAEVlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAS,IAJuB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAwBpC,OAdAC,qBAAW,WACPxB,EAASC,GACJwB,MAAK,SAAAC,GAEFC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAQ,YAK1B,CAAEpB,IAEGqB,EDpBsBM,CAAa3B,GAA9Ba,EAFuB,EAE5BN,KAAYa,EAFgB,EAEhBA,QAEnB,OACI,oCACI,wBAAIJ,UAAU,mCAAmChB,GAChDoB,GAAW,sCACZ,yBAAKJ,UAAU,aACX,4BAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIkB,IAAKlB,EAAIC,IACLD,WEfvBmB,EAAe,WAAI,MAQO/C,mBAAS,CAAC,eARjB,mBAQrBgD,EARqB,KAQVjD,EARU,KAe5B,OACI,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQiD,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI4B,IAAM5B,EACNA,SAAWA,UC1BnC+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.459e7cbe.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n//se desestructura y se llama setCategories\r\nexport const AddCategory = ({setCategories}) => {\r\n  \r\n    //Valor inicial de el input text,tambien llamado estado\r\n    const [inputValue, setinputValue] = useState('Ingrese nuevo anime')\r\n\r\n    const handleInputChange = ( e )=>{\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats=> [inputValue,...cats]);\r\n            setinputValue('')\r\n        }\r\n        \r\n\r\n    }\r\n    //onSudmit\r\n    //onChange se va a disparar cada vez que esa caja de texto cambie, dentro del onChange se puede poner una funcion de flecha\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange} \r\n            />\r\n        </form>\r\n    )\r\n}\r\n//dentro se coloca el nombre de la propiedad que se desea hacer requerida\r\nAddCategory.protoTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\n\r\n  export  const getGifs = async( category )=>{\r\n    \r\n        const url= `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=c9Br0fh93YaEyqHsTHH0q2tNdDXwjMY6`\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n        const gifs = data.map(img=>{\r\n            return{\r\n                id:img.id,\r\n                title:img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        return gifs;\r\n    }\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const {data:images,loading}= useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate_animated animate_flash \">{category}</h3>\r\n            {loading && <p>Loading</p>}\r\n            <div className=\"card-grid\"> \r\n                <ol>\r\n                    {\r\n                        images.map( img=> (\r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n                </ol>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs=( category )=>{\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n    //primer arumento es una funcion\r\n    //segundo argumento va a ser un arreglo de dependencias\r\n    //[], significa que este codigo, solo quiero que se ejcute, solo cuando se renderiza el componente por primer vez\r\n   \r\n    useEffect( ()=>{\r\n        getGifs( category )\r\n            .then(imgs=>{\r\n\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading:false\r\n                    })\r\n                });\r\n                \r\n            })\r\n    },[ category ] )\r\n    \r\n    return state;//{data:[],loading:true}\r\n}","import React, {  useState }  from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = ()=>{\r\n    //crear una constante que contenga un arreglo\r\n    //utilizar ol para mostrar el arreglo en una lista ordenada\r\n    //Se utiliza un metodo de el arreglo, llamado map, que transforma\r\n    //cada uno de los elementos que estan dentro de su arreglo\r\n//map, recibe dos argumentos, 1. elemento de arreglo, 2. indice\r\n//const categories = ['One Punch','Fairy Tail','D-Gray-Man']\r\n\r\n    const [categories,setCategories] = useState(['Fairy Tail']);\r\n//Para agregar nuevos elementos se usa el operador ...\r\n// const handleAdd=()=> {\r\n//   setCategories(cats=> [...cats,'Black clover']);\r\n//} ;\r\n\r\n//comunicacion  entre categorias, se puede pasar propiedades a el componente, en este caso se le pasa una funcion, que es setCategories, dentro se le manda la referecia a setCategories\r\n    return(\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/> \r\n        \r\n        <ol>\r\n            {\r\n                categories.map( category => (\r\n                    <GifGrid \r\n                        key={ category }\r\n                        category={ category}/>\r\n                ))\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render( \n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}